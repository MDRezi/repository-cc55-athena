import tensorflow as tf
import numpy as np

# Data preparation (dummy data for illustration purposes)
# Assume X_train and y_train are your training data and labels
X_train = np.random.rand(100, 128, 128, 3)  # 100 images of 128x128 with 3 color channels
y_train = np.random.randint(0, 2, 100)      # 100 labels (0 or 1)

# Define a simple CNN model
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=10)

# Save the model
model.save('face_detection_model.h5')

# Convert the model to TFLite
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the TFLite model
with open('face_detection_model.tflite', 'wb') as f:
    f.write(tflite_model)
